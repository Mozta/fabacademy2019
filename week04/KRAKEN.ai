%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 22.0.1
%%For: (LOPEZ GONZALEZ JOSE ANDRES) ()
%%Title: (KRAKEN.ai)
%%CreationDate: 2/11/2019 8:41 AM
%%Canvassize: 16383
%%BoundingBox: -1 0 366 780
%%HiResBoundingBox: -0.045017 0.020095 365.2861 779.7289
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 183.5 389.28 183.5 389.28
%AI3_TileBox: -645.0916 -1877.8265 1010.3416 2657.6066
%AI3_DocumentPreview: None
%AI5_ArtSize: 365.25 779.78
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -602 849.78 1 1578 906 26 0 0 50 125 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-122 -7.21997
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 60 128 8
%%BeginData: 8423 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD1CFF7DF8F87DFD37FF52FD04F852FD35FF52FD06F827FD32FFA8
%27FD08F827FD31FF27FD0AF827FD2EFFA827FD0DF8FD2DFF27FD0EF827FD
%2AFFA827FD10F827FD29FF52FD12F827FD27FF52FD14F852FD25FF7DFD16
%F87DFD23FFA8FD18F87DFD22FFFD19F827FD21FF52FD1AF87DFD1FFFA8FD
%1CF8FD1FFF7DFD1CF852FD1EFF7DFD1CF8A8FD1FFFFD1BF827FD20FFA8FD
%19F827A8FD12FFA87D7DA8FD0BFFA8FD18F87DFD0BFFA87D7DFD04FFA827
%F8F8F87DFD0BFFA8FD16F8A8FD0BFF52F8F8F827A8FFA8F8F827F8F8F87D
%FD0BFF7DFD14F87DFD0BFF52F8F82727F8F8A827F87DFFFF27F8F8FD0CFF
%52FD12F827FD0BFFA827F852FFFF7DF82727A8FFFFFFA8F8F87DFD0BFF7D
%FD12F87DFD0BFF7DF8F8A8FFFFFF7D52FD06FF27F87DFD0BFFA8FD12F8A8
%FD0BFF52F827FD0CFFF8F87DFD0BFF7DFD12F8A8FD0BFF7DF8F8A8FD0AFF
%7DF8F8A8FD0BFFA8FD12F8A8FD0BFF7DF8F8A8FD0AFF52F8F8A8FD0BFF7D
%FD12F8A8FD0CFFF8F852FD0AFF27F827FD0CFFA8FD12F8A8FD0CFF27F852
%FD09FFA8F8F87DFD0CFF7DFD12F8A8FD0CFF52F8F8FD09FF7DF8F87DFD0C
%FFA8FD12F87DFD0CFF7DF8F87DFD08FF27F8F8FD0DFF7DFD12F8A8FD0CFF
%A8F8F852FD07FFA827F852FD0DFFA8FD12F87DFD0DFF27F8F8FD07FF7DF8
%F852FD0DFF7DFD12F87DFD0DFF52F8F87DFD06FF52F8F8A8FD0DFF7DFD12
%F87DFD0DFF7DF8F852FD05FFA827F8F8A8FD0DFF7DFD12F87DFD0DFFA8F8
%F827FD06FFF8F827FD0EFF7DFD12F87DFD0DFFA827F827FD05FF7DF8F827
%FD0EFF7DFD12F8A8FD0EFFF8F8F8A8FD04FFA8F8F827FD0FFF52FD10F87D
%FD0FFF27F8F8A8FD04FF7DF8F827FD10FF7DFD0EF87DFD10FFF8F8F8A8FD
%04FFA8F8F8F8A87D7D52527DFD0BFFFD0DF827FD0AFFA87D525252A87DF8
%F827A8FD04FFA8FD0AF8A8FD08FF7DFD0EF8A8FD08FF7DFD0AF8FD06FF27
%F8F8F8277D7D7D52F8F87DFD07FF5252A8FD09F827A85252FD07FF52F8F8
%527DA85227F8F8F827FD05FFA8FD04F8A8FD04FFA827F8A8FD06FF27A8FF
%27FD08F827FF7D52FD06FF7DF827FD05FFA8FD04F8A8FD04FF52FD04F852
%FD05FFA8F852FD06FFA8F852FD0AF827277DFD06FF52F8FD06FF52FD04F8
%27FFFFFFA8FD06F87DFD05FFF852FD07FF52FD0CF852FD07FF2727FD05FF
%A8FD06F8A8FFFF52F8F87DF8F8F827A8FFFFFF27F87DFD07FFA8FD0CF8FD
%08FF7DF852A8FFFFFFFD04F87D27F87DFFFF27F827FF52F8F8F827A8FFA8
%7D7DFD07FF7DFD0EF87DFD07FF7D52FFFFA8FD04F852FFF8F852FFFF27F8
%52FFFF27F827F8F87DFD07FFA87D27FD10F8277DFD08FF7DFD05F8FFFF52
%F852FFA8F8F852FFFF7DFD06F852FD047D27FD16F852527D7D7D5227FD05
%F8A8FFFF27F827FFFFF8F852FFFFFF7DFD2CF8A8FFFFFF52F852FFFF27F8
%27FD04FF7DFD2AF8A8FD04FFF8F827FFFF52F8F8A8FD04FFA852FD12F827
%52FD12F827FD05FFA8F8F87DFFFF7DF8F827FD06FFA85227F82727525252
%FD09F8A87DFD09F8277DFD05277DA8FD06FF52F8F87DFFFFFF27F8F87DFD
%0CFF7DFD0AF87DA8FD0AF87DFD0CFFA8F8F8F8FD04FF52F8F8F87DFD09FF
%A827FD0BF8A87DF8F827FD08F827FD0AFFA8F8F8F87DFD05FFFD04F852FD
%07FF7D27FD08F82752F8F8A8A8F8F85252FD08F827A8FD06FFA87DF8F8F8
%27FD06FFA8FD05F852527D7D7D27FD0AF8A827F8F8A87DF8F8527DFD04F8
%27FD05F827527D7D7D27FD05F8A8FD07FFA8FD0EF8527DF8F8F827FF52F8
%F8A8A8F8F827FF27F8F8F87D52FD0DF827A8FD09FFA827FD0AF8277DFFFD
%04F852FFF8F8F8A87DF8F827FF7DF8F8F827A87DFD0BF827A8FD0CFF7D52
%FD05F827277DFFFF52FD04F8FFFF27F8F8A8A8F8F8F8FFA8FD04F852FFFF
%7D27FD05F82752A8FD11FFA8A87DA8A8FFFFFF7DFD04F852FFFFF8F8F8FF
%7DF8F8F8A8FF27FD04F8A8FD04FF7DA87DA8A8FD1BFF27FD04F87DFFA8F8
%F8F8A8A8F8F8F8FFFF7DFD04F827FD23FF7DFD05F8A8FFA8F8F8F8FFA8F8
%F8F8A8FFA8FD05F852FD22FFFD05F852FFFFA8F8F827FFFFF8F8F8A8FFFF
%27FD05F8A8FD20FF27FD05F852FFFFA8F8F8F8FFFFF8F8F87DFFFF52FD05
%F827FD1FFF7DFD06F8A8FFFF7DF8F827FFFFF8F8F8A8FFFF7DFD06F87DFD
%1DFF7DFD07F8A8FFFF7DF8F827FFFF27F8F852FFFFA8FD07F8A8FD1CFF27
%F8F8F827F8F827FFFFFF52F8F852FFFF27F8F87DFFFFFF27F8F82727F8F8
%27FD1BFF27F8F8F85252F8F852FFFFFF52F8F827FFFF52F8F852FFFFFF27
%F8F85252F8F8F827FD19FF52F8F8F827FF52F8F87DFFFFFF27F8F852FFFF
%52F8F852FFFFFF7DF8F852FFFD04F852FD17FF52FD04F8A8FF27F8F87DFF
%FFA827F8F852FFFF52F8F827FFFFFF52F8F827FFA8FD04F852FD15FF52FD
%04F87DFFFF27F8F8A8FFFFFFF8F8F87DFFFF52F8F827FFFFFFA8F8F827FF
%FFA8FD04F852FD12FFA827FD04F87DFFFFFFF8F8F8A8FFFFA8F8F8F87DFF
%FF7DF8F8F8FFFFFF7DF8F827FFFFFFA8FD04F827FD10FF7DFD05F8A8FFFF
%FFA827F8F8A8FFFFA8F8F8F8A8FFFF7DF8F8F8A8FFFFA8F8F8F8FD04FFA8
%FD05F8A8FD0DFF52FD04F827A8FD05FFF8F8F8A8FFFF7DF8F8F8A8FFFFA8
%F8F8F8A8FFFFA8F8F827A8FD04FFA8FD05F87DFD0BFF52FD04F852FD07FF
%27F8F8A8FFFF7DF8F8F8FFFFFFA8F8F8F87DFFFFFFF8F827FD07FF52FD04
%F87DFD09FF52FD04F87DFD08FFF8F8F8A8FFFF52F8F827FD04FFF8F8F852
%FFFF7DF8F827FD08FF7DFD04F852FD07FF7DF8F8F827FD0AFF27F8F8A8FF
%FF52F8F827FD04FF27F8F827FFFFA8F8F827FD09FFA827F8F8F87DFD05FF
%A8F8F8F827FD0BFF27F8F87DFFFF27F8F852FD04FF27F8F827FFFF7DF8F8
%52FD0AFFA827F8F8F8A8FD04FF27F8F827FD0CFF52F8F87DFFFF27F8F852
%FD04FF7DF8F8F8FFFF7DF8F852FD0CFF27F8F827FFFFFF7DF8F8F8FD0DFF
%7DF8F852FFA8F8F8F87DFD04FF7DF8F8F8A8FF52F8F87DFD0CFFA8F8F8F8
%7DFFFF27F8F87DFD0DFFA8F8F827FF7DF8F827A8FD05FFF8F8F8A8FF52F8
%F8A8FD0DFF52F8F852FF7DF8F827A8FD05FFA8522752A8FFFFFFA8F8F827
%FF52F8F827FD06FF27F8F852FFF8F8F8FD04FFA8525252FD07FFF8F8F8A8
%7DF8F852FD05FFA8FD04F827A8FFFFFF27F8F8A827F8F87DFD06FF52F8F8
%27A8F8F852FFFFFFA8FD05F8FD06FF7DF8F87D27F8F8A8FD05FF27F8A87D
%F8F852FFFFFF52F8F827F8F8F87DFD06FFA8F8F8F852F8F852FFFFFF27F8
%F87D7DF827FD05FF7DF8F85227F827FD06FF52A8FFFF7DF8F8A8FFFF7DFD
%06F8FD08FF27FD05F8A8FFFFA8F8F8A8FFFFA852FD06FFFD05F827FD0BFF
%F8F87DFFFFFFFD05F852FD08FF27FD04F827A8FFFF7DF827FD0AFFA827FD
%04F852FD0BFF27F87DFFFFFF52FD04F87DFD08FF7DFD04F852FFFFFF52F8
%27FD0BFF27FD04F827FD0BFF27F852FFFFFF7DFD04F8FD09FFA8FD04F87D
%FFFFFF7DF852FD0BFF27FD04F827FD0BFF27F87DFD04FFF8F8F827FD0AFF
%27F8F8F8A8FFFFFF7DF827FD0BFFFD06F8FD0AFFA8F8F87DFFFFFFA8F8F8
%F852FD0AFF7DF8F8F8A8FFFFFF7DF8F8A8FD09FFA8F8F82752F8F87DFD09
%FF27F8F8FD04FFA8F8F8F87DFD0AFF7DF8F8F8A8FFFFFFA8F8F852FD09FF
%A8F8F8527DF8F852FD08FF7DF8F852FD04FF52F8F8F827FD0AFF52F8F8F8
%7DFD04FF27F8F8A8FD08FF27F8F8A8FFF8F8F8A8FD06FF7DF8F8F8A8FD04
%FF27F8F8F827FD0AFFFD04F827FD04FFA8F8F8F8A8FD06FF7DF8F827FFFF
%7DF8F8F87DFFFFFFA827F8F8F852FD05FFFD05F87DFD08FF7DFD05F8A8FD
%04FF7DF8F8F852A8FFFFFF7DF8F8F852FFFFFF27F8F8F8272727FD04F852
%FD05FFA8F8F82727F852FD08FF52F852F8F8F8FD06FF52FD04F8275227F8
%F8F827FD04FFA827FD08F852FD06FFA8F8F8F8A8F8F8A8FD07FFF827A8F8
%F8F87DFD06FF52FD09F8FD07FF7DFD05F852A8FD07FF7DF8F827FFA8F87D
%FD06FF7DF8A8FFF8F8F8A8FD07FFA82727F8F8F82752FD0AFF7DA87DFD0A
%FF7DF8F8F8FFFF7D7DFD06FF5252FFA8F8F8F87DFD09FFA8A87DA8A8FD18
%FF7DF8F827FD0EFFF8F8F87DFD26FF7DF8F8F8FD0DFFA8F8F8F87DFD26FF
%7DF8F827FD0EFFF8F8F8A8FD26FFA8F8F8F8FD0DFFA8F8F8F87DFD26FFA8
%27F827FD0EFFF8F8F8FD28FFF8F8F8FD0DFFA8F8F8F8A8FD27FF27F8F8A8
%FD0CFFA8F8F827FD28FF27F8F8A8FD0CFF7DF8F852FD28FF52F8F87DFD0C
%FF7DF8F852FD28FF52F8F87DFD0CFF52F8F87DFD28FFA8F8F852FD0CFF52
%F8F8A8FD28FFA8F8F827FD0CFF27F8F8FD2AFF27F8F8FD0CFF27F852FD2A
%FF52F8F8A8FD0AFFA8F8F852FD2AFF7DF8F8A8FD0AFF7DF8F8A8FD2BFFF8
%F852FD0AFF52F8F8A8FD2BFF52F852FD0AFF27F827FD2CFF7DF8F8FD09FF
%A8F8F87DFD2DFFF8F8A8FD08FF7DF827FD2EFF27F87DFD08FF52F827FD2E
%FF7DF827FD08FF27F8A8FD2FFFF8F8A8FD06FFA8F827FD30FF52F8A8FD06
%FF52F87DFD30FFA8F827FD06FF27F8FD32FF5227FD06FFF87DFD32FFA8F8
%A8FD04FF7DF8A8FD33FF5252FD04FF5252FD34FFA852A8FFFFFF52FD1AFF
%FF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (Flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Deform.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (PlanetX.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Line Plugin Group) (Line artwork) (Illustrator.exe)
%AI8_PluginGroupInfo
(Adobe Sketch Plugin Group) (Sketch artwork) (Illustrator.exe)
%AI8_PluginGroupInfo
(Adobe Vectorized Object) (Image Tracing) (Illustrator.exe)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligraphicBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.749721 0.679194 0.670497 0.901457 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Capa 1) Ln
0 A
u
U
u
*u
0 O
0.749721 0.679194 0.670497 0.901457 0 0 0 Xa
0 J 0 j 1 w 10 M []0 d0 XR
222.94 195.62 m
217.33 186.19 213.16 176.83 205.7 170.48 C
204.34 171.09 L
204.54 173.5 204.34 176.09 205.01 178.31 C
208.5434 189.6966 212.2267 201.03 216.06 212.31 C
217.3012 215.6557 217.4101 219.3163 216.37 222.7299 C
210.23 244.4299 203.24 265.9199 198.71 288.0399 C
194.82 307.0399 193.42 326.7799 191.65 346.2699 C
188.27 383.3699 186.65 420.5999 186.65 457.8999 C
186.6253 458.3391 186.5752 458.7765 186.5 459.2099 C
178.5 459.2099 L
178.5 458.66 178.35 457.7899 178.35 456.9199 C
178.2657 404.5785 175.0198 352.29 168.63 300.34 C
166.16 280.06 160.21 260.8101 154.38 241.53 C
152.27 234.53 150.11 227.53 148.24 220.44 C
147.7626 218.4604 147.8213 216.3894 148.41 214.44 C
151.95 203.36 155.83 192.44 159.32 181.33 C
160.2371 177.9307 160.5884 174.4035 160.36 170.89 C
151.68 176.63 147.87 186.5 141.44 194.7301 C
140.68 186.8701 139.44 179.0401 139.23 171.1701 C
137.9 125.6801 145.97 81.8101 158.35 38.7501 C
161.27 28.5701 164.45 18.47 167.43 8.31007 C
168.15 5.8401 168.53 3.24007 169.06 0.710098 C
167.88 0.040115 L
166.22 2.29011 164.39 4.4001 162.94 6.80012 C
153.12 23.0501 145.94 40.8001 139.72 58.9801 C
127.9437 93.073 121.2618 128.7168 119.89 164.7601 C
119.19 183.9801 122.33 202.5802 127.56 220.7601 C
128.6349 224.3122 128.487 228.1221 127.14 231.5802 C
116.42 261.8801 109.87 293.1901 110.14 325.8801 C
110.23 337.1501 111.81 348.4001 112.74 359.6501 C
112.87 361.2501 113.15 362.8301 113.54 365.6501 C
109.25 359.8601 105.63 355.0501 102.09 350.1801 C
89.43 332.7801 73.32 320.0801 56.42 308.4001 C
43.63 299.54 32.06 289.21 24.92 273.89 C
16.03 254.89 12.92 235.15 20.08 214.63 C
26.63 195.89 41.2 188.8 58.33 195.55 C
68.6341 199.5896 77.1179 207.2381 82.2 217.07 C
87.79 227.5 88.12 238.94 84.83 250.26 C
82.21 259.26 73.62 263.07 65.94 258.9 C
63.86 257.76 62.56 254.9 60.85 252.9 C
60.01 251.9 59.04 251.07 58.13 250.1701 C
57.44 251.4901 56.27 252.7601 56.13 254.1701 C
55.67 258.9401 57.8 262.6001 60.97 265.53 C
73.28 276.94 90.79 272.4801 96.73 256 C
102.3 240.58 101.02 225.09 94.47 210.43 C
85.27 189.85 70.14 177.92 49.47 175.5 C
27.91 172.98 8.24 189.88 2.52999 216.5 C
-5.06001 251.86 4.39999 282.11 27.33 307.17 C
34.9992 315.3334 43.4234 322.7532 52.49 329.33 C
75.73 346.67 93.21 369.89 108.69 395.27 C
115.82 406.95 122.69 418.82 129.69 430.61 C
128.96 431.38 L
127.09 429.84 125.24 428.27 123.35 426.76 C
107.9 414.43 91.13 405.76 71.66 407 C
45.66 408.65 24.12 420.37 12.86 447.45 C
3.07999 470.95 4.63 494.72 19.03 516.33 C
19.7072 517.3736 19.9711 518.6322 19.77 519.86 C
14.52 538.91 17.26 557.5 22.5 575.86 C
26.5 589.79 31.28 603.44 35.02 617.44 C
36.5962 623.2026 37.0812 629.2091 36.45 635.15 C
35.12 645.91 23.96 650.88 15.76 644.97 C
13.15 643.09 10.89 640.64 8.41999 638.52 C
7.34818 637.4179 6.07972 636.5258 4.67999 635.89 C
3.32406 635.4319 1.83865 635.5587 0.579987 636.24 C
0.039986 636.6 0.179985 639.02 0.579987 640.24 C
4.15999 650.93 16.91 660.71 26.25 660.08 C
36.33 659.4 46.84 649.19 49.71 637.39 C
51.62 629.55 50.91 621.74 49.03 614.13 C
45.49 599.76 41.34 585.57 37.87 571.13 C
34.78 558.35 33.66 545.33 36.58 532.23 C
36.73 531.53 37.03 530.86 37.27 530.12 C
42.83 531.18 48.27 532.49 53.69 533.19 C
68.77 535.12 81.08 528.88 90.95 516.52 C
95.53 510.76 95.95 502.03 92.48 495.8 C
90.48 492.19 87.48 489.93 83.69 490.56 C
81.63 490.89 79.63 492.79 77.63 493.99 C
78.15 495.37 L
78.8674 495.6984 79.6056 495.979 80.36 496.21 C
86.42 497.59 88.54 501.21 86.07 507.51 C
84.83 510.65 82.67 514.06 80.07 515.72 C
67.92 523.52 55.23 524.13 41.77 517.72 C
42.86 515.3 43.7 513.16 44.77 511.14 C
54.01 493.45 66.84 480.99 85.53 477.7 C
100.87 475 115.47 478.8 129.59 485.24 C
134.3863 487.4149 139.0184 489.9349 143.45 492.78 C
145.1775 494.1134 146.3151 496.0693 146.62 498.2301 C
146.77 499.4901 144.87 501.5501 143.47 502.4301 C
137.1 506.4301 134.47 518.9401 138.79 527.5801 C
140.35 530.7001 141.25 533.5801 140.18 536.9001 C
139.6565 538.4116 138.7463 539.7596 137.54 540.8101 C
135.62 542.4501 133.36 543.5801 131.36 545.1201 C
127.27 548.2401 125.36 552.4001 125.53 558.1201 C
126.2567 577.8667 126.8134 597.6201 127.2 617.3801 C
127.31 622.9401 126.61 628.5101 126.5 634.0901 C
126.4438 639.3216 124.4154 644.3393 120.82 648.1401 C
115.12 654.3901 109.26 660.4701 103.69 666.8601 C
93.01 679.1101 92.54 684.7501 101.26 698.8601 C
113.1901 718.1901 128.6101 733.9201 144.2601 749.3501 C
152.5801 757.5501 161.34 765.2001 169.9301 773.0701 C
171.0701 774.0701 172.3701 774.9701 173.5601 775.9701 C
179.7001 781.1101 185.8401 780.9101 191.8401 775.7901 C
217.1001 754.2601 241.2201 731.3601 261.0001 703.3801 C
263.5891 699.4682 265.8917 695.3742 267.8901 691.1301 C
271.0201 684.9801 270.7201 678.9201 266.5101 673.5001 C
262.9801 668.9301 259.2101 664.5901 255.5101 660.2101 C
254.1599 658.5407 252.664 656.9946 251.0401 655.5901 C
240.9201 647.3201 237.3801 636.0601 237.8901 622.4401 C
238.6701 601.9401 238.6101 581.4401 239.6701 560.9201 C
240.1501 551.6101 236.6701 546.1601 229.8601 542.0601 C
224.0501 538.5501 223.1301 534.4701 226.2201 528.0601 C
229.8301 520.5801 229.2201 513.2001 225.2201 506.1901 C
224.1574 504.5246 222.6968 503.1499 220.9701 502.1901 C
217.7301 500.2501 216.9701 495.5501 220.1401 493.6201 C
242.7601 480.0301 266.1401 470.2701 291.9901 481.6201 C
306.8901 488.1301 316.2301 501.3701 323.6101 517.6901 C
320.0601 518.9401 316.8501 520.5001 313.5001 521.1701 C
304.2905 523.1403 294.6772 521.6147 286.53 516.89 C
281.7649 514.4177 278.6533 509.6192 278.34 504.26 C
277.96 499.26 279.25 497.42 283.68 496.39 C
284.84 496.13 285.97 495.75 287.11 495.39 C
287.56 493.89 L
285.46 492.69 283.44 490.78 281.24 490.46 C
277.68 489.94 274.69 491.95 272.66 495.36 C
269.19 501.17 269.41 510.47 273.78 516.14 C
282.21 527.14 292.95 533.52 306.07 533.32 C
313.17 533.21 320.25 531.51 327.86 530.45 C
330.3882 538.8552 330.9122 547.7358 329.39 556.38 C
326.94 569.77 323.39 582.91 320.45 596.2 C
318.27 606.13 315.63 616.02 314.45 626.11 C
313.09 637.94 317.73 647.52 326.4 654.62 C
334.2 661.02 342.35 661.62 350.76 656.35 C
356.4282 652.8506 360.9314 647.7488 363.7 641.69 C
364.47 640.01 364.02 637.62 364.13 635.56 C
362.25 635.93 360.13 635.79 358.55 636.78 C
356.23 638.25 354.32 640.52 352.23 642.44 C
347.31 646.95 342.11 649.37 335.81 645.69 c
329.51 642.01 326.74 635.69 328.11 628.34 C
330.1588 617.7945 332.7827 607.369 335.97 597.11 C
340.51 582.11 345.69 567.36 347.3299 551.49 C
348.3899 541.36 348.3299 531.29 345.47 521.49 C
344.6211 519.1615 345.1418 516.5539 346.82 514.73 C
352.38 507.57 355.18 498.93 356.62 489.73 C
364.19 441.13 333.38 413.29 302.24 407.73 C
277.97 403.42 257.5 413.12 238.6999 429.01 C
237.84 429.73 236.9999 430.5 236.1399 431.23 C
235.6991 431.4484 235.2448 431.6388 234.78 431.8 C
237.3899 427.16 239.42 423.19 241.78 419.46 C
252.02 403.23 262.23 386.89 272.63 370.71 C
282.97 354.71 296.4 342.27 310.69 330.86 C
324.05 320.21 337.93 310.06 347.63 294.89 C
364.18 268.94 370.51 240.57 360.48 209.8001 C
353.79 189.3001 340.8 176.4201 320.25 175.3701 C
293.97 174.03 267.86 199.84 265.58 229.0501 C
264.89 237.8701 265.04 246.5101 267.9 254.9 C
273.75 272.12 291.63 277.27 304.26 265.3001 C
307.51 262.22 309.57 258.3001 308.92 253.4301 C
308.76 252.2101 307.5 251.1701 306.74 250.0501 C
305.94 250.9 304.74 251.6001 304.39 252.6401 C
302.16 258.9501 297.62 260.2901 292.22 260.1801 c
286.82 260.07 282.72 257.1801 280.76 251.6901 C
276.83 240.6201 277.02 229.2201 282 218.8301 C
288.21 205.8301 298.26 197.4201 311.24 194.1101 C
328.79 189.6402 342.82 199.9401 346.93 221.2801 C
353.1 253.2801 342.81 278.9701 320.45 299.1801 C
315.4842 303.5573 310.207 307.5679 304.66 311.1801 C
284.9376 324.4487 268.0055 341.4521 254.82 361.2301 C
254.03 362.3901 253.15 363.4701 251.66 365.4501 C
252.57 358.1501 253.5 351.9901 254.08 345.7801 C
257.49 309.0301 251.87 273.5701 240.4 239.2701 C
237.24 229.8201 236.88 221.6401 239.66 212.0901 C
246.66 188.0901 246.17 163.3501 243.33 138.6201 C
239.3801 103.1967 230.3263 68.5311 216.45 35.7001 C
212.18 25.6402 206.91 16.0902 201.92 6.42012 C
200.7 4.06013 198.77 2.1501 197.17 0.020095 C
195.94 0.700088 L
196.66 3.78011 197.29 6.88008 198.11 9.92006 C
204.36 33.15 211.36 56.1701 216.77 79.65 C
224.0801 110.9218 227.0879 143.0449 225.71 175.13 C
225.54 178.88 225.09 182.63 224.61 186.36 C
224.22 189.19 223.63 191.96 222.94 195.62 C
f
1 D
137.09 254.12 m
143.36 272.38 148 291.06 149.93 310.47 C
152.93 340.29 155.93 370.11 158.51 399.97 C
159.82 415.21 160.22 430.55 161.03 445.84 C
146.03 414.84 134.69 382.45 129.83 347.63 C
125.4 315.89 129.21 284.89 137.09 254.12 C
f
204.36 445.48 m
204.36 444.02 204.27 442.56 204.36 441.11 C
206.36 411.36 207.79 381.54 210.59 351.87 C
212.81 328.38 216.59 305.07 219.96 281.71 C
220.63 276.99 222.17 272.41 223.44 267.81 c
224.71 263.21 226.15 258.69 227.67 253.59 C
247.68 322.12 232.93 384.78 204.36 445.48 C
204.36 445.48 L
f
242.54 456.66 m
242.42 456.26 242.31 455.87 242.2 455.48 C
248.85 450.1 255.57 444.83 262.13 439.3 C
274.79 428.63 288.98 426.48 304.19 429.54 C
323.05 433.34 336.24 444.67 341.61 465.54 C
344.75 477.72 344.19 489.85 338.21 501.98 C
317.06 458.14 285.33 442.89 242.54 456.66 C
242.54 456.66 L
f
26.94 501.77 m
22.12 492.77 20.54 481.06 22.39 470.36 C
26.26 447.89 40.55 432.89 61.63 429.44 C
72.48 427.64 83.56 426.71 93.35 433.16 C
102.87 439.44 111.65 447.08 120.73 454.16 C
121.5183 454.9531 122.2283 455.8205 122.85 456.75 C
79.63 443.09 48 458.11 26.94 501.77 C
26.94 501.77 L
f
153.78 516.2 m
153.72 520.03 150.67 523.39 147.24 523.4 C
143.65 523.4 140.62 519.81 140.78 515.71 c
140.94 511.61 143.84 508.71 147.48 508.87 c
151.12 509.03 153.85 512.25 153.78 516.2 C
153.78 516.2 L
f
224.1999 516.26 m
224.1099 520.31 221.2799 523.38 217.6899 523.32 c
214.0999 523.26 211.1999 519.91 211.2099 516.1 C
211.2099 511.99 214.2799 508.78 218.0399 508.92 c
221.7999 509.06 224.28 512.14 224.2 516.26 C
224.1999 516.26 L
f
*U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
